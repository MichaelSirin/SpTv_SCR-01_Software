;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;// Управляющая программа КОДЕРА
;// Связь с внешним миром
;
;#include "Coding.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#define BAUD 38400
;#define DTXDDR 	DDRC.0		// вывод программного UART   (35pin, на стороне - 16)
;#define DTXPIN	PORTC.0		// вывод программного UART
;
;
;////////////////////////////////////////////////////////////////////////////////
;// Фазы работы приемопередатчиков
;#define RX_HDR	 1		// Принятый байт - заголовок
;#define RX_LEN   2		// Принятый байт - длина
;#define RX_ADDR  3		// Принятый байт - адрес
;#define RX_TYPE  4		// Принятый байт - тип пакета
;#define RX_DATA  5		// Принятый байт - байт данных
;#define RX_CRC   6		// Принятый байт - CRC
;#define RX_OK    7		// Пакет успешно принят и адресован мне
;#define RX_TIME  8		// Во время приема произошел тайм-аут
;#define RX_ERR   9		// Ошибка CRC приема
;#define RX_BUSY 10		// Запрос прочитан, а ответ еще не сформирован
;
;#define UDRE 5
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;
;#define RXTIMEOUT 4000	// Тайм-аут приема наружного канала
;
;////////////////////////////////////////////////////////////////////////////////
;// Работа с наружным каналом
;
;unsigned char tx0crc;
;unsigned char rx0state = RX_HDR;

	.DSEG
;unsigned char rx0crc;
;unsigned char rx0len;
;unsigned char rx0addr;
;unsigned char rx0type;
;
;#define COMBUFSIZ 255
;
;unsigned char rx0buf[COMBUFSIZ];
;unsigned char rx0ptr;
;
;// Передача байта во "внешний" канал
;void putchar0(char byt)
; 0001 002F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0030 	while ((UCSR0A & DATA_REGISTER_EMPTY)==0);
;	byt -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 0031 	UDR0 = byt;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 0032 	tx0crc += byt;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 0033 }
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;
;// Начало ответа на запрос по внешнему каналу
;void StartReply(unsigned char dlen)
; 0001 0037 {
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0001 0038 	rx0state = RX_BUSY;					// Запрос обработан
;	dlen -> Y+0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0001 0039 	tx0crc = 0;										// Готовлю CRC
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0001 003A 
; 0001 003B //	UCSR0B.3 = 1;								// Разрешаю передатчик
; 0001 003C 
; 0001 003D 	putchar0(dlen+1);							// Передаю длину
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0001 003E }
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;
;void EndReply(void)
; 0001 0041 {
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 0042 	putchar0(tx0crc);							// Контрольная сумма
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0001 0043 //	UCSR0B.3 = 0;								// Запрещаю передатчик
; 0001 0044 	rx0state = RX_HDR;						// Разрешаю прием след. запроса
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0001 0045 }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;//
;void Reply(u8 status)
; 0001 0049 {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 004A 
; 0001 004B 		#ifdef print
; 0001 004C 		printf("Reply-%x\n\r",status);
; 0001 004D 		#endif
; 0001 004E 
; 0001 004F 		StartReply (1);
;	status -> Y+0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0001 0050 		putchar0(status);        // текущий статус
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0001 0051 		EndReply();
;PCODE: $0000003C VOL: 0
; 0001 0052 
; 0001 0053 }
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;
;// Прерывание по приему байта из "наружного" канала
;interrupt [USART0_RXC] void uart_rx_isr(void)
; 0001 0057 {
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0001 0058 	register unsigned char byt;
; 0001 0059 
; 0001 005A 	byt = UDR0;									// Принятый байт
;PCODE: $00000042 VOL: 0
;	byt -> R17
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0001 005B 
; 0001 005C 
; 0001 005D 	switch (rx0state)
;PCODE: $00000045 VOL: 0
; 0001 005E 	{
; 0001 005F 	case RX_HDR:								// Должен быть заголовок
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0001 0060 		if (byt != PACKHDR)					// Отбрасываю не заголовок
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0001 0061 		{
; 0001 0062 			break;
;PCODE: $0000004B VOL: 0
; 0001 0063 		}
; 0001 0064 
; 0001 0065 
; 0001 0066 		rx0state = RX_LEN;					// Перехожу к ожиданию длины
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0001 0067 		rx0crc = 0;								// Готовлю подсчет CRC
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0001 0068 
; 0001 0069 		OCR1A = TCNT1+RXTIMEOUT;	// Взвожу тайм-аут
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0001 006A 		TIFR = 0x10;								// Предотвращаю ложное срабатывание
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0001 006B 		TIMSK |= 0x10;							// Разрешение прерывания по тайм-ауту
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0001 006C 		break;
;PCODE: $00000059 VOL: 0
; 0001 006D 
; 0001 006E 	case RX_LEN:
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0001 006F 		rx0len = byt - 3;							// Длина содержимого
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0001 0070 		rx0state = RX_ADDR;					// К приему адреса
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0001 0071 		break;
;PCODE: $00000062 VOL: 0
; 0001 0072 
; 0001 0073 	case RX_ADDR:
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0001 0074 		rx0addr = byt;							// Адрес
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0001 0075 		rx0state = RX_TYPE;					// К приему типа
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0001 0076 		break;
;PCODE: $0000006A VOL: 0
; 0001 0077 
; 0001 0078 	case RX_TYPE:
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0001 0079 		rx0type = byt;							// Тип
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0001 007A 		rx0ptr = 0;									// Указатель на начало данных
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0001 007B 		if (rx0len)
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0001 007C 		{
; 0001 007D 			rx0state = RX_DATA;				// К приему данных
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0001 007E 		}
; 0001 007F 		else
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0001 0080 		{
; 0001 0081 			rx0state = RX_CRC; 				// К приему контрольной суммы
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0001 0082 		}
;PCODE: $0000007B VOL: 0
; 0001 0083 		break;
;PCODE: $0000007C VOL: 0
; 0001 0084 
; 0001 0085 	case RX_DATA:
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0001 0086 		if (rx0ptr > (COMBUFSIZ-1))
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0001 0087 		{
; 0001 0088 			rx0state = RX_HDR;				// Если пакет слишком длинный - отвергаю и иду в начало
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0001 0089 			break;
;PCODE: $00000085 VOL: 0
; 0001 008A 		}
; 0001 008B 		rx0buf[rx0ptr++] = byt;				// Данные
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0001 008C 		if (rx0ptr < rx0len)						// Еще не все ?
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0001 008D 		{
; 0001 008E 			break;
;PCODE: $00000092 VOL: 0
; 0001 008F 		}
; 0001 0090 		rx0state = RX_CRC;					// К приему контрольной суммы
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0001 0091 		break;
;PCODE: $00000096 VOL: 0
; 0001 0092 
; 0001 0093 	case RX_CRC:
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0001 0094 		if (byt != rx0crc)
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0001 0095 		{
; 0001 0096 			rx0state = RX_HDR;				// Не сошлась CRC - игнорирую пакет и жду следующий
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0001 0097 		}
; 0001 0098 // убрал фильтр адреса
; 0001 0099 else
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0001 009A {
; 0001 009B rx0buf[rx0ptr++] = byt;						// Данные
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0001 009C rx0state = RX_OK;								// Принят пакет, на который нужно ответить
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0001 009D }
;PCODE: $000000AA VOL: 0
; 0001 009E 
; 0001 009F 		TIMSK &= 0x10 ^ 0xFF;				// Запретить прерывание по тайм-ауту
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0001 00A0 		break;
;PCODE: $000000AE VOL: 0
; 0001 00A1 
; 0001 00A2 		break;
;PCODE: $000000AF VOL: 0
; 0001 00A3 
; 0001 00A4 	default:											// Ошибочное состояние
;PCODE: $000000B0 VOL: 0
; 0001 00A5 		rx0state = RX_HDR;					// Перехожу на начало
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0001 00A6 		break;
;PCODE: $000000B3 VOL: 0
; 0001 00A7 	}
;PCODE: $000000B4 VOL: 0
; 0001 00A8 
; 0001 00A9 	rx0crc += byt;								// Подсчитываю контрольную сумму
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0001 00AA }
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;
;// Прерывание по сравнению A таймера 1 для подсчета тайм-аута приема "внешнего" канала
;interrupt [TIM1_COMPA] void timer1_comp_a_isr(void)
; 0001 00AE {
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0001 00AF 	rx0state = RX_HDR;						// По тайм-ауту перехожу к началу приема нового пакета
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0001 00B0 	TIMSK &= 0x10 ^ 0xFF;					// Больше не генерировать прерываний
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0001 00B1 }
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;
;unsigned char HaveIncomingPack(void)
; 0001 00B4 {
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0001 00B5 	if (rx0state == RX_OK)	return 255;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0001 00B6 	else					return 0;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0001 00B7 }
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;
;unsigned char IncomingPackType(void)
; 0001 00BA {
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0001 00BB 	return rx0type;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0001 00BC }
;PCODE: $000000D8 VOL: 0
;
;void DiscardIncomingPack(void)
; 0001 00BF {
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0001 00C0 	rx0state = RX_HDR;						// Разрешаю прием следующего пакета
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0001 00C1 }
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;
;// Настройка приемопередатчика
;void CommInit(void)
; 0001 00C5 {
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0001 00C6 	// Настраиваю UART
; 0001 00C7 	UCSR0A = 0b00000000;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0001 00C8 	UCSR0B = 0b10010000;	//0b10011000;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0001 00C9 	UCSR0C = 0x86;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0001 00CA 	UBRR0L = ((_MCU_CLOCK_FREQUENCY_ / (16 * BAUD)) - 1) & 0xFF;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0001 00CB 	UBRR0H = (((_MCU_CLOCK_FREQUENCY_ / (16 * BAUD)) - 1) >> 8) & 0xFF;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0001 00CC 
; 0001 00CD 	// Таймер 1 для подсчета тайм-аутов приема
; 0001 00CE 	TCCR1B  = 0b00000101;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0001 00CF }
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;
;void putword0(unsigned short wd)
; 0001 00D2 {
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0001 00D3 	putchar0(wd);
;	wd -> Y+0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0001 00D4 	putchar0(wd >> 8);
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0001 00D5 }
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;
;//--------------------------------------------------------------------------------------------
;// "программный" UART
;void dtxdl(void)
; 0001 00DA {
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0001 00DB 	int i;
; 0001 00DC 	for (i = 0; i < 15; i ++)
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;	i -> R16,R17
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0001 00DD 	{
; 0001 00DE 		#asm("nop")
;PCODE: $00000107 VOL: 0
	nop
;PCODE: $00000108 VOL: 0
; 0001 00DF 	}
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0001 00E0 }
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;
;void putchar2(char c)
; 0001 00E3 {
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0001 00E4 	register unsigned char b;
; 0001 00E5 
; 0001 00E6 	#asm("cli")
;PCODE: $00000113 VOL: 0
;	c -> Y+1
;	b -> R17
;PCODE: $00000114 VOL: 0
	cli
;PCODE: $00000115 VOL: 0
; 0001 00E7 
; 0001 00E8 	DTXDDR = 1;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0001 00E9 //	DRXDDR = 0;
; 0001 00EA 	DTXPIN = 0;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0001 00EB 	dtxdl();
;PCODE: $0000011A VOL: 0
; 0001 00EC 
; 0001 00ED 	for (b = 0; b < 8; b ++)
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0001 00EE 	{
; 0001 00EF 		if (c & 1)
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0001 00F0 		{
; 0001 00F1 			DTXPIN = 1;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0001 00F2 		}
; 0001 00F3 		else
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0001 00F4 		{
; 0001 00F5 			DTXPIN = 0;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0001 00F6 		}
;PCODE: $0000012D VOL: 0
; 0001 00F7 
; 0001 00F8 		c >>= 1;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0001 00F9 		dtxdl();
;PCODE: $00000131 VOL: 0
; 0001 00FA 	}
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0001 00FB 
; 0001 00FC 	DTXPIN = 1;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0001 00FD 	dtxdl();
;PCODE: $00000139 VOL: 0
; 0001 00FE 	dtxdl();
;PCODE: $0000013A VOL: 0
; 0001 00FF 
; 0001 0100 	#asm("sei")
;PCODE: $0000013B VOL: 0
	sei
;PCODE: $0000013C VOL: 0
; 0001 0101 }
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;
;// передача с внутреннего канада во внешний. Указываем количество передаваемых байт.
;void	Transmitt_from_TWI_to_UART (u8 *Transmitting_Bytes)
; 0001 0105 {
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0001 0106 	u8 temp;
; 0001 0107 
; 0001 0108 	temp = *Transmitting_Bytes + 1;
;PCODE: $00000144 VOL: 0
;	*Transmitting_Bytes -> Y+1
;	temp -> R17
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0001 0109 
; 0001 010A 		while ( temp -- )
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0001 010B 	   				putchar0 (*Transmitting_Bytes++);
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0001 010C }
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
