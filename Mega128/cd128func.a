;#include "Coding.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;unsigned char flagTWI				=	0;
;
;
;
;// Инициализация выводов
;void portInit (void)
; 0002 0009 		{

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 000A 			DDRB.7 = 1;		// testpin
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0002 000B 			CS_DDR_SET();	// для CF Card
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0002 000C 		}
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;
;
;// -------------------- Функции работы с таймером 0 -------------------------------
;///////////////////////////////////////////////////////////////////////////////////////////////
;// Timer/Counter 0 initialization ; Clock source: System Clock
;// Clock value: 31,250 kHz ;  Mode: Normal top=FFh
;// Используем для контроля за шиной TWI
;///////////////////////////////////////////////////////////////////////////////////////////////
;void timer_0_Init  (void)
; 0002 0017 	{
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0002 0018 		ASSR=0x00;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0002 0019 		TCCR0=0x0;        //0x06 -start
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0002 001A 		TCNT0=0x01;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0002 001B 		OCR0=0x00;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0002 001C 		TIMSK^=0x01;			// Timer(s)/Counter(s) Interrupt(s) initialization
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0002 001D 	}
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;// -------------------- Функции работы с таймером 2 -------------------------------
;///////////////////////////////////////////////////////////////////////////////////////////////
;// Timer/Counter 2 initialization;  Clock source: System Clock
;// Clock value: 7,813 kHz ; Mode: Normal top=FFh
;// Используем для таймаута передачи пакетов закрытия
;///////////////////////////////////////////////////////////////////////////////////////////////
;void timer_2_Init  (void)
; 0002 0026 	{
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0002 0027 		TCCR2=0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0002 0028 		TCNT2=0x00;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0002 0029 		OCR2=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0002 002A 		TIMSK^=0x40;			// Timer(s)/Counter(s) Interrupt(s) initialization
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0002 002B 		ETIMSK^=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0002 002C 	}
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;
;// -------------------- Функции работы с таймером 3 -------------------------------
;///////////////////////////////////////////////////////////////////////////////////////////////
;// Clock source: System Clock; Clock value: 7,813 kHz
;// Mode: Normal top=FFFFh ;Timer 3 Overflow Interrupt: On
;// Используем для таймаута передачи пакетов закрытия
;///////////////////////////////////////////////////////////////////////////////////////////////
;void timer_3_Init  (void)
; 0002 0035 	{
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0002 0036 		TCCR3A=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0002 0037 		TCCR3B=0x05;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0002 0038 		TCNT3H=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0002 0039 		TCNT3L=0xAA;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0002 003A 		ICR3H=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0002 003B 		ICR3L=0xFF;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0002 003C 		OCR3AH=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0002 003D 		OCR3AL=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0002 003E 		OCR3BH=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0002 003F 		OCR3BL=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0002 0040 		OCR3CH=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0002 0041 		OCR3CL=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0002 0042 
; 0002 0043 		TIMSK^=0x00;                    // Timer(s)/Counter(s) Interrupt(s) initialization
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0002 0044 		ETIMSK^=0x04;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0002 0045 	}
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0002 004B {
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0002 004C 		TCCR0 = 0x0;						//останавливаем таймер
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0002 004D 		flagTWI  = flagTWI  | (1 << time_is_Out);	 //взводим признак
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0002 004E 
; 0002 004F }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;
;// Timer 2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0002 0053 {
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0002 0054 		TCCR2 = 0x0; 						// останов таймера
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0002 0055 }
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;
;
;
;// запускаем таймер для таймаута
;void timeOut (void)
; 0002 005B 	{
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0002 005C //		flagTWI  = (flagTWI  ^ (1 << time_is_Out));		// сброс признака
; 0002 005D 		TCNT0=0x0	;														// обнуляем счетчик
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0002 005E 		TCCR0 = 0x06;													// пускаем таймер (около 10 мс)
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0002 005F 	}
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;
;// остановка таймера для таймаута
;void timeOutStop (void)
; 0002 0063 	{
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0002 0064 		TCCR0 = 0x0; 						// осттанов таймера (около 10 мс)
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0002 0065 	}
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;
;// Timer 3 overflow interrupt service routine
;interrupt [TIM3_OVF] void timer3_ovf_isr(void)
; 0002 0069 {
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0002 006A 		EndTimePack = 1;			// время вышло
;PCODE: $0000007C VOL: 0
; 0002 006B 
; 0002 006C 						#ifdef print
; 0002 006D 						printf ("Timeout Scremb! \r\n");
; 0002 006E 						#endif
; 0002 006F 
; 0002 0070 
; 0002 0071 		TCCR3A=0x00;			// останов таймера
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0002 0072 		TCCR3B=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0002 0073 
; 0002 0074 		testpin = ~testpin;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0002 0075 
; 0002 0076 }
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;
;// запускаем таймер для таймаута пакетов (150mc)
;void timeOutPackStart (void)
; 0002 007A 	{
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0002 007B 		EndTimePack = 0;		// сброс признака
;PCODE: $00000090 VOL: 0
; 0002 007C 
; 0002 007D //		TCNT3H=0xFF;			// иниц. величины 32мс
; 0002 007E //		TCNT3L=0x00;			// иниц. величины 32мс
; 0002 007F 
; 0002 0080 //		TCNT3H=0xFC;			// иниц. величины 100мс
; 0002 0081 //		TCNT3L=0xF2;        // иниц. величины 100мс
; 0002 0082 
; 0002 0083 //		TCNT3H=0xFB;			// иниц. величины 150мс
; 0002 0084 //		TCNT3L=0x6C;			// иниц. величины 150мс
; 0002 0085 
; 0002 0086 		TCNT3H=0xF0;			// test
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0002 0087 		TCNT3L=0x00;        // test
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0002 0088 
; 0002 0089 		TCCR3A=0x00;			// делитель до 7.813кГц
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0002 008A 		TCCR3B=0x05;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0002 008B 
; 0002 008C 
; 0002 008D 	}
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;
;// подменяем ключ в пакете
;void ModifyKey (void)
; 0002 0091 {
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0002 0092 		u8 a,b;
; 0002 0093 		#ifdef print
; 0002 0094 		printf ("Modify Key\n\r");
; 0002 0095 		#endif
; 0002 0096 
; 0002 0097 		#ifdef print
; 0002 0098 			for (a=0;a<rx0len;a++) printf ("%x ", rx0buf[a]);
; 0002 0099 		#endif
; 0002 009A 
; 0002 009B 		b=rx0buf [55];
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;	a -> R17
;	b -> R16
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0002 009C 		rx0buf[55] = ver_kl;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0002 009D 
; 0002 009E 		rx0buf[rx0len] = ((rx0buf[rx0len]-b) +ver_kl);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0002 009F 
; 0002 00A0 		#ifdef print
; 0002 00A1 			printf("\n\r");
; 0002 00A2 			for (a=0;a<rx0len;a++) printf ("%x ", rx0buf[a]);
; 0002 00A3 		#endif
; 0002 00A4 }
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;
;
;//  проверяем совпадение логических адресов
; unsigned char Logic_Address_Identical (unsigned char Logik_Address, unsigned char device)
; 0002 00A9  {
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0002 00AA 		unsigned char a;
; 0002 00AB 
; 0002 00AC 		for (a=1; a<= int_Devices; a++)				// ищем порт по адресу
;PCODE: $000000B8 VOL: 0
;	Logik_Address -> Y+2
;	device -> Y+1
;	a -> R17
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0002 00AD 		{
; 0002 00AE 		 	if (lAddrDevice [a]	== Logik_Address)
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0002 00AF 		 	{
;PCODE: $000000C9 VOL: 0
; 0002 00B0 		 		if (a != device) return TRUE;		// есть совпадение
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0002 00B1 		 	}
;PCODE: $000000D2 VOL: 0
; 0002 00B2 		 }
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0002 00B3 
; 0002 00B4  		return FALSE;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0002 00B5  }
;PCODE: $000000DD VOL: 0
;
; // проверяем и заполняем внутр. таблицу адресов
;void check_incoming_LOG_ADDR (u8 checking_Device)
; 0002 00B9 {
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0002 00BA 
; 0002 00BB 		if ( !( Logic_Address_Identical ( rxBuffer[5], checking_Device ) ) )  //есть ли схожий адрес?
;	checking_Device -> Y+0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0002 00BC 		{
;PCODE: $000000E8 VOL: 0
; 0002 00BD 					#ifdef print
; 0002 00BE 					printf ("Logic ADDR-%d\r\n",rxBuffer[5]);
; 0002 00BF 					#endif
; 0002 00C0 					 lAddrDevice [checking_Device] = rxBuffer[5];
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0002 00C1 		}
;PCODE: $000000EC VOL: 0
; 0002 00C2 		else		 lAddrDevice [checking_Device] = 0;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0002 00C3 
; 0002 00C4 // обновляем зеркало портов
; 0002 00C5 		 if (! lAddrDevice [checking_Device])	reflection_active_PORTS &= ((1 << (checking_Device - 1)) ^ -1);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0002 00C6 		 else													reflection_active_PORTS |= (1 << (checking_Device - 1));
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0002 00C7 }
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
