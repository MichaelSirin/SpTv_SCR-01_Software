;/*
;	Progressive Resources LLC
;
;			FlashFile
;
;	Version : 	1.32
;	Date: 		12/31/2003
;	Author: 	Erick M. Higa
;
;	Software License
;	The use of Progressive Resources LLC FlashFile Source Package indicates
;	your understanding and acceptance of the following terms and conditions.
;	This license shall supersede any verbal or prior verbal or written, statement
;	or agreement to the contrary. If you do not understand or accept these terms,
;	or your local regulations prohibit "after sale" license agreements or limited
;	disclaimers, you must cease and desist using this product immediately.
;	This product is © Copyright 2003 by Progressive Resources LLC, all rights
;	reserved. International copyright laws, international treaties and all other
;	applicable national or international laws protect this product. This software
;	product and documentation may not, in whole or in part, be copied, photocopied,
;	translated, or reduced to any electronic medium or machine readable form, without
;	prior consent in writing, from Progressive Resources LLC and according to all
;	applicable laws. The sole owner of this product is Progressive Resources LLC.
;
;	Operating License
;	You have the non-exclusive right to use any enclosed product but have no right
;	to distribute it as a source code product without the express written permission
;	of Progressive Resources LLC. Use over a "local area network" (within the same
;	locale) is permitted provided that only a single person, on a single computer
;	uses the product at a time. Use over a "wide area network" (outside the same
;	locale) is strictly prohibited under any and all circumstances.
;
;	Liability Disclaimer
;	This product and/or license is provided as is, without any representation or
;	warranty of any kind, either express or implied, including without limitation
;	any representations or endorsements regarding the use of, the results of, or
;	performance of the product, Its appropriateness, accuracy, reliability, or
;	correctness. The user and/or licensee assume the entire risk as to the use of
;	this product. Progressive Resources LLC does not assume liability for the use
;	of this product beyond the original purchase price of the software. In no event
;	will Progressive Resources LLC be liable for additional direct or indirect
;	damages including any lost profits, lost savings, or other incidental or
;	consequential damages arising from any defects, or the use or inability to
;	use these products, even if Progressive Resources LLC have been advised of
;	the possibility of such damages.
;*/
;
;/*
;#include _AVR_LIB_
;#include <stdio.h>
;
;#ifndef _file_sys_h_
;	#include "..\flash\file_sys.h"
;#endif
;*/
;	#include <coding.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;unsigned long OCR_REG;
;unsigned char _FF_buff[512];
;unsigned int PT_SecStart;
;unsigned long BS_jmpBoot;
;unsigned int BPB_BytsPerSec;
;unsigned char BPB_SecPerClus;
;unsigned int BPB_RsvdSecCnt;
;unsigned char BPB_NumFATs;
;unsigned int BPB_RootEntCnt;
;unsigned int BPB_FATSz16;
;unsigned char BPB_FATType;
;unsigned long BPB_TotSec;
;unsigned long BS_VolSerial;
;unsigned char BS_VolLab[12];
;unsigned long _FF_PART_ADDR, _FF_ROOT_ADDR, _FF_DIR_ADDR;
;unsigned long _FF_FAT1_ADDR, _FF_FAT2_ADDR;
;unsigned long _FF_RootDirSectors;
;unsigned int FirstDataSector;
;unsigned long FirstSectorofCluster;
;unsigned char _FF_error;
;unsigned long _FF_buff_addr;
;extern unsigned long clus_0_addr, _FF_n_temp;
;extern unsigned int c_counter;
;//extern unsigned char _FF_FULL_PATH[_FF_PATH_LENGTH];
;
;unsigned long DataClusTot;
;
;flash struct CMD
;{
;	unsigned int index;
;	unsigned int tx_data;
;	unsigned int arg;
;	unsigned int resp;
;};
;
;flash struct CMD sd_cmd[CMD_TOT] =
;{
;	{CMD0,	0x40,	NO_ARG,		RESP_1},		// GO_IDLE_STATE
;	{CMD1,	0x41,	NO_ARG,		RESP_1},		// SEND_OP_COND (ACMD41 = 0x69)
;	{CMD9,	0x49,	NO_ARG,		RESP_1},		// SEND_CSD
;	{CMD10,	0x4A,	NO_ARG,		RESP_1},		// SEND_CID
;	{CMD12,	0x4C,	NO_ARG,		RESP_1},		// STOP_TRANSMISSION
;	{CMD13,	0x4D,	NO_ARG,		RESP_2},		// SEND_STATUS
;	{CMD16,	0x50,	BLOCK_LEN,	RESP_1},		// SET_BLOCKLEN
;	{CMD17, 0x51,	DATA_ADDR,	RESP_1},		// READ_SINGLE_BLOCK
;	{CMD18, 0x52,	DATA_ADDR,	RESP_1},		// READ_MULTIPLE_BLOCK
;	{CMD24, 0x58,	DATA_ADDR,	RESP_1},		// WRITE_BLOCK
;	{CMD25, 0x59,	DATA_ADDR,	RESP_1},		// WRITE_MULTIPLE_BLOCK
;	{CMD27,	0x5B,	NO_ARG,		RESP_1},		// PROGRAM_CSD
;	{CMD28, 0x5C,	DATA_ADDR,	RESP_1b},		// SET_WRITE_PROT
;	{CMD29, 0x5D,	DATA_ADDR,	RESP_1b},		// CLR_WRITE_PROT
;	{CMD30, 0x5E,	DATA_ADDR,	RESP_1},		// SEND_WRITE_PROT
;	{CMD32,	0x60,	DATA_ADDR,	RESP_1},		// TAG_SECTOR_START
;	{CMD33,	0x61,	DATA_ADDR,	RESP_1},		// TAG_SECTOR_END
;	{CMD34,	0x62,	DATA_ADDR,	RESP_1},		// UNTAG_SECTOR
;	{CMD35,	0x63,	DATA_ADDR,	RESP_1},		// TAG_ERASE_GROUP_START
;	{CMD36,	0x64,	DATA_ADDR,	RESP_1},		// TAG_ERASE_GROUP_END
;	{CMD37,	0x65,	DATA_ADDR,	RESP_1},		// TAG_ERASE_GROUP
;	{CMD38,	0x66,	STUFF_BITS,	RESP_1b},		// ERASE
;	{CMD42,	0x6A,	STUFF_BITS,	RESP_1b},		// LOCK_UNLOCK
;	{CMD58,	0x7A,	NO_ARG,		RESP_3},		// READ_OCR
;	{CMD59,	0x7B,	STUFF_BITS,	RESP_1},		// CRC_ON_OFF
;	{ACMD41, 0x69,	NO_ARG,		RESP_1}
;};
;
;unsigned char _FF_spi(unsigned char mydata)
; 0004 007C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0004 007D     SPDR = mydata;          //byte 1
;	mydata -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0004 007E     while ((SPSR&0x80) == 0);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0004 007F     return SPDR;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0004 0080 }
;PCODE: $0000001A VOL: 0
;
;unsigned int send_cmd(unsigned char command, unsigned long argument)
; 0004 0083 {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0004 0084 	unsigned char spi_data_out;
; 0004 0085 	unsigned char response_1;
; 0004 0086 	unsigned long response_2;
; 0004 0087 	unsigned int c, i;
; 0004 0088 
; 0004 0089 	SD_CS_ON();			// select chip
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;	command -> Y+14
;	argument -> Y+10
;	spi_data_out -> R17
;	response_1 -> R16
;	response_2 -> Y+6
;	c -> R18,R19
;	i -> R20,R21
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0004 008A 
; 0004 008B 	spi_data_out = sd_cmd[command].tx_data;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0004 008C 	_FF_spi(spi_data_out);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0004 008D 
; 0004 008E 	c = sd_cmd[command].arg;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0004 008F 	if (c == NO_ARG)
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0004 0090 		for (i=0; i<4; i++)
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0004 0091 			_FF_spi(0);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0004 0092 else
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0004 0093 	{
; 0004 0094 		spi_data_out = (argument & 0xFF000000) >> 24;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0004 0095 		_FF_spi(spi_data_out);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0004 0096 		spi_data_out = (argument & 0x00FF0000) >> 16;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0004 0097 		_FF_spi(spi_data_out);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0004 0098 		spi_data_out = (argument & 0x0000FF00) >> 8;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0004 0099 		_FF_spi(spi_data_out);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0004 009A 		spi_data_out = (argument & 0x000000FF);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0004 009B 		_FF_spi(spi_data_out);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0004 009C 	}
;PCODE: $00000061 VOL: 0
; 0004 009D 	if (command == CMD0)
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0004 009E 		spi_data_out = 0x95;		// CRC byte, don't care except for first signal=0x95
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0004 009F 	else
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0004 00A0 		spi_data_out = 0xFF;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0004 00A1 	_FF_spi(spi_data_out);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0004 00A2 	_FF_spi(0xff);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0004 00A3 	c = sd_cmd[command].resp;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0004 00A4 	switch(c)
;PCODE: $00000078 VOL: 0
; 0004 00A5 	{
; 0004 00A6 		case RESP_1:
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0004 00A7 			return (_FF_spi(0xFF));
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0004 00A8 			break;
;PCODE: $00000082 VOL: 0
; 0004 00A9 		case RESP_1b:
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0004 00AA 			response_1 = _FF_spi(0xFF);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0004 00AB 			response_2 = 0;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0004 00AC 			while (response_2 == 0)
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0004 00AD 				response_2 = _FF_spi(0xFF);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0004 00AE return (response_1);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0004 00AF 			break;
;PCODE: $0000009C VOL: 0
; 0004 00B0 		case RESP_2:
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0004 00B1 			response_2 = _FF_spi(0xFF);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0004 00B2 			response_2 = (response_2 << 8) | _FF_spi(0xFF);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0004 00B3 			return (response_2);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0004 00B4 			break;
;PCODE: $000000B4 VOL: 0
; 0004 00B5 		case RESP_3:
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0004 00B6 			response_1 = _FF_spi(0xFF);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0004 00B7 			OCR_REG = 0;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0004 00B8 			response_2 = _FF_spi(0xFF);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0004 00B9 			OCR_REG = response_2 << 24;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0004 00BA 			response_2 = _FF_spi(0xFF);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0004 00BB 			OCR_REG |= (response_2 << 16);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0004 00BC 			response_2 = _FF_spi(0xFF);
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0004 00BD 			OCR_REG |= (response_2 << 8);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0004 00BE 			response_2 = _FF_spi(0xFF);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0004 00BF 			OCR_REG |= (response_2);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0004 00C0 			return (response_1);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0004 00C1 			break;
;PCODE: $000000EA VOL: 0
; 0004 00C2 	}
;PCODE: $000000EB VOL: 0
; 0004 00C3 	return (0);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0004 00C4 }
;PCODE: $000000F0 VOL: 0
;
;void clear_sd_buff(void)
; 0004 00C7 {
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0004 00C8 	SD_CS_OFF();
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0004 00C9 	_FF_spi(0xFF);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0004 00CA 	_FF_spi(0xFF);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0004 00CB }
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;
;unsigned char initialize_media(void)
; 0004 00CE {
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0004 00CF 	unsigned char data_temp;
; 0004 00D0 	unsigned long n;
; 0004 00D1 
; 0004 00D2 	// SPI BUS SETUP
; 0004 00D3 	// SPI initialization
; 0004 00D4 	// SPI Type: Master
; 0004 00D5 	// SPI Clock Rate: 921.600 kHz
; 0004 00D6 	// SPI Clock Phase: Cycle Half
; 0004 00D7 	// SPI Clock Polarity: Low
; 0004 00D8 	// SPI Data Order: MSB First
; 0004 00D9 	DDRB |= 0x07;		// Set SS, SCK, and MOSI to Output (If not output, processor will be a slave)
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;	data_temp -> R17
;	n -> Y+1
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0004 00DA 	DDRB &= 0xF7;		// Set MISO to Input
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0004 00DB 	CS_DDR_SET();		// Set CS to Output
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0004 00DC 	SPCR=0x50;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0004 00DD 	SPSR=0x00;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0004 00DE 
; 0004 00DF 	BPB_BytsPerSec = 512;	// Initialize sector size to 512 (all SD cards have a 512 sector size)
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0004 00E0     _FF_n_temp = 0;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0004 00E1 	if (reset_sd()==0)
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0004 00E2 		return (0);
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0004 00E3 	// delay_ms(50);
; 0004 00E4 	for (n=0; ((n<100)||(data_temp==0)) ; n++)
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0004 00E5 	{
; 0004 00E6 		SD_CS_ON();
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0004 00E7 		data_temp = _FF_spi(0xFF);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0004 00E8 		SD_CS_OFF();
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0004 00E9 	}
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0004 00EA 	// delay_ms(50);
; 0004 00EB 	for (n=0; n<100; n++)
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0004 00EC 	{
; 0004 00ED 		if (init_sd())		// Initialization Succeeded
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0004 00EE 			break;
;PCODE: $00000142 VOL: 0
; 0004 00EF 		if (n==99)
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0004 00F0 			return (0);
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0004 00F1 	}
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0004 00F2 
; 0004 00F3 	if (_FF_read(0x0)==0)
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0004 00F4 	{
; 0004 00F5 		#ifdef _DEBUG_ON_
; 0004 00F6 			printf("\n\rREAD_ERR");
; 0004 00F7 		#endif
; 0004 00F8 		_FF_error = INIT_ERR;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0004 00F9 		return (0);
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0004 00FA 	}
; 0004 00FB 	PT_SecStart = ((int) _FF_buff[0x1c7] << 8) | (int) _FF_buff[0x1c6];
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0004 00FC 
; 0004 00FD 	if ((((_FF_buff[0]==0xEB)&&(_FF_buff[2]==0x90))||(_FF_buff[0]==0xE9)) && ((_FF_buff[510]==0x55)&&(_FF_buff[511]==0xAA)))
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0004 00FE     	PT_SecStart = 0;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0004 00FF 
; 0004 0100 	_FF_PART_ADDR = (long) PT_SecStart * (long) BPB_BytsPerSec;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0004 0101 
; 0004 0102 	if (PT_SecStart)
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0004 0103 	{
; 0004 0104 		if (_FF_read(_FF_PART_ADDR)==0)
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0004 0105 		{
; 0004 0106 		   	#ifdef _DEBUG_ON_
; 0004 0107 				printf("\n\rREAD_ERR");
; 0004 0108 			#endif
; 0004 0109 			_FF_error = INIT_ERR;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0004 010A 			return (0);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0004 010B 		}
; 0004 010C 	}
;PCODE: $0000019F VOL: 0
; 0004 010D 
; 0004 010E  	#ifdef _DEBUG_ON_
; 0004 010F 		printf("\n\rBoot_Sec: [0x%X %X %X] [0x%X] [0x%X]", _FF_buff[0],_FF_buff[1],_FF_buff[2],_FF_buff[510],_FF_buff[511]);
; 0004 0110 	#endif
; 0004 0111 
; 0004 0112     BS_jmpBoot = (((long) _FF_buff[0] << 16) | ((int) _FF_buff[1] << 8) | (int) _FF_buff[2]);
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0004 0113 	BPB_BytsPerSec = ((int) _FF_buff[0xC] << 8) | (int) _FF_buff[0xB];
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0004 0114     BPB_SecPerClus = _FF_buff[0xD];
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0004 0115 	BPB_RsvdSecCnt = ((int) _FF_buff[0xF] << 8) | (int) _FF_buff[0xE];
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0004 0116 	BPB_NumFATs = _FF_buff[0x10];
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0004 0117 	BPB_RootEntCnt = ((int) _FF_buff[0x12] << 8) | (int) _FF_buff[0x11];
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0004 0118 	BPB_FATSz16 = ((int) _FF_buff[0x17] << 8) | (int) _FF_buff[0x16];
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0004 0119 	BPB_TotSec = ((unsigned int) _FF_buff[0x14] << 8) | (unsigned int) _FF_buff[0x13];
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0004 011A 	if (BPB_TotSec==0)
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0004 011B 		BPB_TotSec = ((unsigned long) _FF_buff[0x23] << 24) | ((unsigned long) _FF_buff[0x22] << 16)
; 0004 011C 					| ((unsigned long) _FF_buff[0x21] << 8) | ((unsigned long) _FF_buff[0x20]);
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0004 011D 	BS_VolSerial = ((unsigned long) _FF_buff[0x2A] << 24) | ((unsigned long) _FF_buff[0x29] << 16)
;PCODE: $00000202 VOL: 0
; 0004 011E 				| ((unsigned long) _FF_buff[0x28] << 8) | ((unsigned long) _FF_buff[0x27]);
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0004 011F 	for (n=0; n<11; n++)
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0004 0120 		BS_VolLab[n] = _FF_buff[0x2B+n];
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0004 0121 BS_VolLab[11] = 0;
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0004 0122 	_FF_FAT1_ADDR = _FF_PART_ADDR + ((long) BPB_RsvdSecCnt * (long) BPB_BytsPerSec);
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0004 0123 	_FF_FAT2_ADDR = _FF_FAT1_ADDR + ((long) BPB_FATSz16 * (long) BPB_BytsPerSec);
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0004 0124 	_FF_ROOT_ADDR = ((long) BPB_NumFATs * (long) BPB_FATSz16) + (long) BPB_RsvdSecCnt;
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0004 0125 	_FF_ROOT_ADDR *= BPB_BytsPerSec;
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0004 0126 	_FF_ROOT_ADDR += _FF_PART_ADDR;
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0004 0127 
; 0004 0128 	_FF_RootDirSectors = ((BPB_RootEntCnt * 32) + BPB_BytsPerSec - 1) / BPB_BytsPerSec;
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0004 0129 	FirstDataSector = (BPB_NumFATs * BPB_FATSz16) + BPB_RsvdSecCnt + _FF_RootDirSectors;
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0004 012A 
; 0004 012B 	DataClusTot = BPB_TotSec - FirstDataSector;
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0004 012C 	DataClusTot /= BPB_SecPerClus;
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0004 012D 	clus_0_addr = 0;		// Reset Empty Cluster table location
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0004 012E 	c_counter = 1;
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0004 012F 
; 0004 0130 	if (DataClusTot < 4085)				// FAT12
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0004 0131 		BPB_FATType = 0x32;
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0004 0132 	else if (DataClusTot < 65525)		// FAT16
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0004 0133 		BPB_FATType = 0x36;
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0004 0134 	else
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0004 0135 	{
; 0004 0136 		BPB_FATType = 0;
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0004 0137 		_FF_error = FAT_ERR;
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0004 0138 		return (0);
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0004 0139 	}
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0004 013A 
; 0004 013B 	_FF_DIR_ADDR = _FF_ROOT_ADDR;		// Set current directory to root address
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0004 013C 
; 0004 013D 	_FF_FULL_PATH[0] = 0x5C;	// a '\'
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0004 013E 	_FF_FULL_PATH[1] = 0;
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0004 013F 
; 0004 0140 	#ifdef _DEBUG_ON_
; 0004 0141 		printf("\n\rPart Address:  %lX", _FF_PART_ADDR);
; 0004 0142 		printf("\n\rBS_jmpBoot:  %lX", BS_jmpBoot);
; 0004 0143 		printf("\n\rBPB_BytsPerSec:  %X", BPB_BytsPerSec);
; 0004 0144 		printf("\n\rBPB_SecPerClus:  %X", BPB_SecPerClus);
; 0004 0145 		printf("\n\rBPB_RsvdSecCnt:  %X", BPB_RsvdSecCnt);
; 0004 0146 		printf("\n\rBPB_NumFATs:  %X", BPB_NumFATs);
; 0004 0147 		printf("\n\rBPB_RootEntCnt:  %X", BPB_RootEntCnt);
; 0004 0148 		printf("\n\rBPB_FATSz16:  %X", BPB_FATSz16);
; 0004 0149 		printf("\n\rBPB_TotSec16:  %lX", BPB_TotSec);
; 0004 014A 		if (BPB_FATType == 0x32)
; 0004 014B 			printf("\n\rBPB_FATType:  FAT12");
; 0004 014C 		else if (BPB_FATType == 0x36)
; 0004 014D 			printf("\n\rBPB_FATType:  FAT16");
; 0004 014E 		else
; 0004 014F 			printf("\n\rBPB_FATType:  FAT ERROR!!");
; 0004 0150 		printf("\n\rClusterCnt:  %lX", DataClusTot);
; 0004 0151 		printf("\n\rROOT_ADDR:  %lX", _FF_ROOT_ADDR);
; 0004 0152 		printf("\n\rFAT2_ADDR:  %lX", _FF_FAT2_ADDR);
; 0004 0153 		printf("\n\rRootDirSectors:  %X", _FF_RootDirSectors);
; 0004 0154 		printf("\n\rFirstDataSector:  %X", FirstDataSector);
; 0004 0155 	#endif
; 0004 0156 
; 0004 0157 	return (1);
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0004 0158 }
;PCODE: $000002A1 VOL: 0
;
;unsigned char spi_speedset(void)
; 0004 015B {
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0004 015C 	if (SPCR == 0x50)
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0004 015D 		SPCR = 0x51;
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0004 015E 	else if (SPCR == 0x51)
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0004 015F 		SPCR = 0x52;
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0004 0160 	else if (SPCR == 0x52)
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0004 0161 		SPCR = 0x53;
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0004 0162 	else
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0004 0163 	{
; 0004 0164 		SPCR = 0x50;
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0004 0165 		return (0);
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0004 0166 	}
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0004 0167 	return (1);
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0004 0168 }
;PCODE: $000002C2 VOL: 0
;
;unsigned char reset_sd(void)
; 0004 016B {
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0004 016C 	unsigned char resp, n, c;
; 0004 016D 
; 0004 016E 	#ifdef _DEBUG_ON_
; 0004 016F 		printf("\n\rReset CMD:  ");
; 0004 0170 	#endif
; 0004 0171 
; 0004 0172 	for (c=0; c<4; c++)		// try reset command 3 times if needed
;PCODE: $000002C5 VOL: 0
;	resp -> R17
;	n -> R16
;	c -> R19
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0004 0173 	{
; 0004 0174 		SD_CS_OFF();
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0004 0175 		for (n=0; n<10; n++)	// initialize clk signal to sync card
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0004 0176 			_FF_spi(0xFF);
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0004 0177 resp = send_cmd(CMD0,0);
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0004 0178 		for (n=0; n<200; n++)
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0004 0179 		{
; 0004 017A 			if (resp == 0x1)
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0004 017B 			{
; 0004 017C 				SD_CS_OFF();
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0004 017D     			#ifdef _DEBUG_ON_
; 0004 017E 					printf("OK!!!");
; 0004 017F 				#endif
; 0004 0180 				SPCR = 0x50;
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0004 0181 				return(1);
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0004 0182 			}
; 0004 0183 	      	resp = _FF_spi(0xFF);
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0004 0184 		}
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
; 0004 0185 		#ifdef _DEBUG_ON_
; 0004 0186 			printf("ERROR!!!");
; 0004 0187 		#endif
; 0004 0188  		if (spi_speedset()==0)
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0004 0189  		{
; 0004 018A 		    SD_CS_OFF();
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0004 018B  			return (0);
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0004 018C  		}
; 0004 018D 	}
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0004 018E 	return (0);
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0004 018F }
;PCODE: $00000319 VOL: 0
;
;unsigned char init_sd(void)
; 0004 0192 {
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
; 0004 0193 	unsigned char resp;
; 0004 0194 	unsigned int c;
; 0004 0195 
; 0004 0196 	clear_sd_buff();
;PCODE: $0000031C VOL: 0
;	resp -> R17
;	c -> R18,R19
;PCODE: $0000031D VOL: 0
; 0004 0197 
; 0004 0198     #ifdef _DEBUG_ON_
; 0004 0199 		printf("\r\nInitialization:  ");
; 0004 019A 	#endif
; 0004 019B     for (c=0; c<1000; c++)
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
; 0004 019C     {
; 0004 019D     	resp = send_cmd(CMD1, 0);
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
; 0004 019E     	if (resp == 0)
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0004 019F     		break;
;PCODE: $0000032F VOL: 0
; 0004 01A0    		resp = _FF_spi(0xFF);
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0004 01A1    		if (resp == 0)
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0004 01A2    			break;
;PCODE: $00000337 VOL: 0
; 0004 01A3    		resp = _FF_spi(0xFF);
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0004 01A4    		if (resp == 0)
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0004 01A5    			break;
;PCODE: $0000033F VOL: 0
; 0004 01A6 	}
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
; 0004 01A7    	if (resp == 0)
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0004 01A8 	{
; 0004 01A9 		#ifdef _DEBUG_ON_
; 0004 01AA    			printf("OK!");
; 0004 01AB 	   	#endif
; 0004 01AC 		return (1);
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
; 0004 01AD 	}
; 0004 01AE 	else
;PCODE: $0000034C VOL: 0
; 0004 01AF 	{
; 0004 01B0 		#ifdef _DEBUG_ON_
; 0004 01B1    			printf("ERROR-%x  ", resp);
; 0004 01B2 	   	#endif
; 0004 01B3 		return (0);
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0004 01B4  	}
;PCODE: $00000351 VOL: 0
; 0004 01B5 }
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;
;unsigned char _FF_read_disp(unsigned long sd_addr)
; 0004 01B8 {
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
; 0004 01B9 	unsigned char resp;
; 0004 01BA 	unsigned long n, remainder;
; 0004 01BB 
; 0004 01BC 	if (sd_addr % 0x200)
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;	sd_addr -> Y+9
;	resp -> R17
;	n -> Y+5
;	remainder -> Y+1
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0004 01BD 	{	// Not a valid read address, return 0
; 0004 01BE 		_FF_error = READ_ERR;
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
; 0004 01BF 		return (0);
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
; 0004 01C0 	}
; 0004 01C1 
; 0004 01C2 	clear_sd_buff();
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0004 01C3 	resp = send_cmd(CMD17, sd_addr);		// Send read request
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
; 0004 01C4 
; 0004 01C5 	while(resp!=0xFE)
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0004 01C6 		resp = _FF_spi(0xFF);
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
; 0004 01C7 for (n=0; n<512; n++)
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
; 0004 01C8 	{
; 0004 01C9 		remainder = n % 0x10;
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0004 01CA 		if (remainder == 0)
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0004 01CB 			printf("\n\r");
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0004 01CC 		_FF_buff[n] = _FF_spi(0xFF);
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
; 0004 01CD 		if (_FF_buff[n]<0x10)
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
; 0004 01CE 			putchar(0x30);
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
; 0004 01CF 		printf("%X ", _FF_buff[n]);
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0004 01D0 	}
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
; 0004 01D1 	_FF_spi(0xFF);
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
; 0004 01D2 	_FF_spi(0xFF);
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
; 0004 01D3 	_FF_spi(0xFF);
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
; 0004 01D4 	SD_CS_OFF();
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
; 0004 01D5 	return (1);
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
; 0004 01D6 }
;PCODE: $000003C2 VOL: 0
;
;// Read data from a SD card @ address
;unsigned char _FF_read(unsigned long sd_addr)
; 0004 01DA {
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
; 0004 01DB 	unsigned char resp;
; 0004 01DC 	unsigned long n;
; 0004 01DD //printf("\r\nReadin ADDR [0x%lX]", sd_addr);
; 0004 01DE 
; 0004 01DF 	if (sd_addr % BPB_BytsPerSec)
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;	sd_addr -> Y+5
;	resp -> R17
;	n -> Y+1
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
; 0004 01E0 	{	// Not a valid read address, return 0
; 0004 01E1 		_FF_error = READ_ERR;
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
; 0004 01E2 		return (0);
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
; 0004 01E3 	}
; 0004 01E4 
; 0004 01E5 	for (;;)
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
; 0004 01E6 	{
; 0004 01E7 		clear_sd_buff();
;PCODE: $000003D7 VOL: 0
; 0004 01E8 		resp = send_cmd(CMD17, sd_addr);	// read block command
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
; 0004 01E9 		for (n=0; n<1000; n++)
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
; 0004 01EA 		{
; 0004 01EB 			if (resp==0xFE)
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
; 0004 01EC 			{	// waiting for start byte
; 0004 01ED 				break;
;PCODE: $000003EB VOL: 0
; 0004 01EE 			}
; 0004 01EF 			resp = _FF_spi(0xFF);
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
; 0004 01F0 		}
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
; 0004 01F1 		if (resp==0xFE)
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
; 0004 01F2 		{	// if it is a valid start byte => start reading SD Card
; 0004 01F3 			for (n=0; n<BPB_BytsPerSec; n++)
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
; 0004 01F4 				_FF_buff[n] = _FF_spi(0xFF);
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
; 0004 01F5 _FF_spi(0xFF);
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
; 0004 01F6 			_FF_spi(0xFF);
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
; 0004 01F7 			_FF_spi(0xFF);
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
; 0004 01F8 			SD_CS_OFF();
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
; 0004 01F9 			_FF_error = NO_ERR;
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
; 0004 01FA 			_FF_buff_addr = sd_addr;
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
; 0004 01FB 			SPCR = 0x50;
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
; 0004 01FC 			return (1);
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
; 0004 01FD 		}
; 0004 01FE 
; 0004 01FF 		SD_CS_OFF();
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
; 0004 0200 
; 0004 0201 		if (spi_speedset()==0)
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
; 0004 0202 			break;
;PCODE: $00000430 VOL: 0
; 0004 0203 	}
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
; 0004 0204 	_FF_error = READ_ERR;
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0004 0205 	return(0);
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
; 0004 0206 }
;PCODE: $0000043C VOL: 0
;
;
;#ifndef _READ_ONLY_
;unsigned char _FF_write(unsigned long sd_addr)
; 0004 020B {
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
; 0004 020C 	unsigned char resp, calc, valid_flag;
; 0004 020D 	unsigned int n;
; 0004 020E 
; 0004 020F 	if ((sd_addr%BPB_BytsPerSec) || (sd_addr <= _FF_PART_ADDR))
;PCODE: $0000043F VOL: 0
;	sd_addr -> Y+6
;	resp -> R17
;	calc -> R16
;	valid_flag -> R19
;	n -> R20,R21
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
; 0004 0210 	{	// Not a valid write address, return 0
; 0004 0211 		_FF_error = WRITE_ERR;
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
; 0004 0212 		return (0);
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
; 0004 0213 	}
; 0004 0214 
; 0004 0215 //printf("\r\nWriting to address:  %lX", sd_addr);
; 0004 0216 	for (;;)
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
; 0004 0217 	{
; 0004 0218 		clear_sd_buff();
;PCODE: $00000455 VOL: 0
; 0004 0219 		resp = send_cmd(CMD24, sd_addr);
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
; 0004 021A 		valid_flag = 0;
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
; 0004 021B 		for (n=0; n<1000; n++)
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
; 0004 021C 		{
; 0004 021D 			if (resp == 0x00)
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
; 0004 021E 			{
; 0004 021F 				valid_flag = 1;
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
; 0004 0220 				break;
;PCODE: $0000046B VOL: 0
; 0004 0221 			}
; 0004 0222 			resp = _FF_spi(0xFF);
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
; 0004 0223 		}
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
; 0004 0224 
; 0004 0225 		if (valid_flag)
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
; 0004 0226 		{
; 0004 0227 			_FF_spi(0xFF);
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
; 0004 0228 			_FF_spi(0xFE);					// Start Block Token
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
; 0004 0229 			for (n=0; n<BPB_BytsPerSec; n++)		// Write Data in buffer to card
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
; 0004 022A 				_FF_spi(_FF_buff[n]);
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
; 0004 022B _FF_spi(0xFF);
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
; 0004 022C 			_FF_spi(0xFF);
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
; 0004 022D 			resp = _FF_spi(0xFF);			// Response should be 0bXXX00101
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
; 0004 022E 			calc = resp | 0xE0;
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
; 0004 022F 			if (calc==0xE5)
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
; 0004 0230 			{
; 0004 0231 				while(_FF_spi(0xFF)==0)
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
; 0004 0232 					;	// Clear Buffer before returning 'OK'
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
; 0004 0233 				SD_CS_OFF();
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
; 0004 0234 //				SPCR = 0x50;			// Reset SPI bus Speed
; 0004 0235 				_FF_error = NO_ERR;
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
; 0004 0236 				return(1);
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
; 0004 0237 			}
; 0004 0238 		}
;PCODE: $000004B1 VOL: 0
; 0004 0239 		SD_CS_OFF();
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0004 023A 
; 0004 023B 		if (spi_speedset()==0)
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
; 0004 023C 			break;
;PCODE: $000004B8 VOL: 0
; 0004 023D 		// delay_ms(100);
; 0004 023E 	}
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
; 0004 023F 	_FF_error = WRITE_ERR;
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
; 0004 0240 	return(0x0);
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
; 0004 0241 }
;PCODE: $000004C3 VOL: 0
;#endif
